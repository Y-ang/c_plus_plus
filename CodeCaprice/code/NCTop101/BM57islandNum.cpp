#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    /**
     * 判断岛屿数量
     * @param grid char字符型vector<vector<>> 
     * @return int整型
     */
    int solve(vector<vector<char> >& grid) {
        // write code here
        int cnt = 0;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                if (grid[i][j] == '1') {
                    cnt++;
                    dfs(i, j, grid);
                }
            }
        }
        return cnt;
    }
    void dfs(int xIndex, int yIndex, vector<vector<char>>& grid) {
        if (xIndex > grid.size() || yIndex > grid[1].size()) {
            return;
        }
        grid[xIndex][yIndex] = '0';
        if (xIndex != 0 && grid[xIndex - 1][yIndex] == '1') dfs(xIndex - 1, yIndex, grid);
        if (xIndex + 1 < grid.size() && grid[xIndex + 1][yIndex] == '1') dfs(xIndex + 1, yIndex, grid);
        if (yIndex != 0 && grid[xIndex][yIndex - 1] == '1') dfs(xIndex, yIndex - 1, grid);
        if (yIndex + 1 < grid[0].size() && grid[xIndex][yIndex + 1] == '1') dfs(xIndex, yIndex + 1, grid);
    }

};

int main() {
    vector<vector<int>> num = {{1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1},{1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,0,0,1,1},{1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1},{1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1},{0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,1,1,1,1},{1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1},{1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0},{1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0},{1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1},{1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1},{0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,1},{1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1},{1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0},{1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1},{1,0,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1}};

    return 0;
}